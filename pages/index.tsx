import Head from 'next/head';
import React, { useState, useEffect } from 'react';
import { toast } from 'react-toastify';
import styles from '../styles/Home.module.css';
import { Header } from "../src/main-page/header/Header";
import { HeroHeader } from '../src/main-page/hero-header/HeroHeader';
import { SortBy, SortByComp } from '../src/main-page/filters/SortBy';
import { ByCategory } from '../src/main-page/filters/ByCategory';
import { Pagination } from '../src/main-page/book/Pagination';
import { axiosInstance } from '../src/axiosConfig';
import { getDefaultImage } from '../src/utils';
import { Book, BookStatus } from '../src/main-page/book/Book';

interface IBook {
  id: number;
  status: BookStatus;
  category: {name: string}
  price: number;
  name: string;
  totalRents: number;
  img: string;
  liked: boolean;
  totalLikes: number;
}

const getSortParam = (sortBy: SortBy) => {
  if (sortBy === SortBy.HighRents) return 'rents_high';
  if (sortBy === SortBy.LowRents) return 'rents_low';
  return undefined;
};
export const Home: React.FC<{ pageCount: number }> = () => {
  const [sortBy, setSortBy] = useState(SortBy.HighRents);
  const [category, setCategory] = useState(1);
  const [page, setPage] = useState(1);
  const [pageCount, setPageCount] = useState(1);
  const [books, setBooks] = useState<IBook[]>([]);
  const [search, setSearch] = useState('');

  const handleSortBy = (value: SortBy) => {
    setSortBy(value);
  };

  useEffect(() => {
    const get = async () => {
      const res = await axiosInstance.get('/book', {
        params: {
          name: search || undefined,
          page,
          sort: getSortParam(sortBy),
          category: category || undefined,
        },
      });
      setBooks(res.data.data);
      setPageCount(res.data.pageCount);
    };
    get();
  }, [page, category, sortBy, search]);

  const handlePageChange = (p: number) => {
    if (p < 1 || p > pageCount) return;
    setPage(p);
  };

  const handleRent = (bookId: number) => async () => {
    try {
      await axiosInstance.post('/rent', {
        bookId,
      });
      toast("کتاب برای شما رزرو شد", { type: 'success' });
    } catch (err) {
      console.error(err);
      toast("رزرو کتاب با مشکل مواجه شد", { type: 'error' });
    }
  };

  const handleCategory = (value: number) => {
    setCategory(value);
  };

  const handleSearch = (value: string) => {
    setSearch(value);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />
      <HeroHeader handleSearch={handleSearch} />
      <div style={{ width: "92%" }}>
        <SortByComp value={sortBy} onChange={handleSortBy} />
        <div className={styles.mainContainer}>
          <ByCategory value={category} onChange={handleCategory} />
          <div id="books" className={styles.books}>
            <div className={styles.booksWrapper}>
              {books.map((item) => (
                <Book
                  key={item.id}
                  id={item.id}
                  status={item.status}
                  liked={item.liked}
                  totalLikes={item.totalLikes}
                  totalRents={item.totalRents}
                  title={item.name}
                  handleRent={handleRent(item.id)}
                  categoryTitle={item.category.name}
                  img={item.img || getDefaultImage()}
                />
              ))}
            </div>
            <Pagination page={page} onPageChange={handlePageChange} pageCount={pageCount} />
          </div>
        </div>
      </div>
      <footer className={styles.footer}>
        <p> تمامی حقوق برای سازندگان محفوظ است. </p>
        <p> زمان حضور مسئول کتابخانه: دوشنبه تا چهارشنبه، ساعت 10:30 تا 12:30 </p>
      </footer>
    </div>
  );
};

export default Home;
